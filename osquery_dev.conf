{
  "file_paths": {
    "credentials": [
      "/home/%/.ssh/authorized_keys", 
      "/root/.ssh/authorized_keys", 
      "/home/%/.aws/credentials"
    ], 
    "webserver": [
      "/var/www/htdocs/%%", 
      "/usr/local/apache%/%%", 
      "/var/www/%%", 
      "/srv/www/%%", 
      "/home/wwwroot/default/%%", 
      "/usr/local/httpd/%%", 
      "/home/meco/www/app/webroot/%%", 
      "/data/www/default/%%"
    ], 
    "binaries": [
      "/usr/bin/%%", 
      "/usr/sbin/%%", 
      "/bin/%%", 
      "/sbin/%%", 
      "/usr/local/bin/%%", 
      "/usr/local/sbin/%%", 
      "/opt/bin/%%", 
      "/opt/sbin/%%"
    ], 
    "configuration": [
      "/etc/passwd", 
      "/etc/shadow", 
      "/etc/resolv.conf", 
      "/etc/my.cnf", 
      "/etc/hosts", 
      "/etc/fstab", 
      "/etc/crontab", 
      "/etc/cron%/%%", 
      "/etc/init/%%", 
      "/etc/pam.d/%%", 
      "/etc/ld.so.conf.d/%%", 
      "/etc/selinux/config", 
      "/sys/fs/selinux/enforce", 
      "/selinux/enforce"
    ],
    "homes": [
      "/root/%%",
      "/home/%/%%"
    ]
  },
  "schedule": {
    "detection_linux_agent_netcat_shell": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.pid AS source_process_id, process_events.path AS file_path, process_events.cmdline AS source_process_commandline, process_events.cwd AS current_working_directory FROM process_events WHERE source_process_commandline like 'nc%' and source_process_commandline like '%-l%' and (source_process_commandline like '%/bin/sh%' OR source_process_commandline like '%/bin/bash%');", 
      "description": "Detects the creation of shells using netcat", 
      "interval": 10
    }, 
    "syslog_events": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT * FROM syslog_events WHERE tag='no such tag'", 
      "description": "Retrieves syslog events from the system.", 
      "interval": 300
    }, 
    "detection_malware_rootkit_mithras_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "mithra`s_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'mithras_rootkit' as malware_family) where path in ('/usr/lib/locale/uboot');"
    }, 
    "detection_malware_rootkit_lion_worm": {
      "platform": "linux", 
      "removed": false, 
      "description": "lion_worm detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'lion_worm' as malware_family) where path in ('/dev/.lib', '/dev/.lib/1iOn.sh', '/bin/mjy', '/bin/in.telnetd', '/usr/info/torn');"
    }, 
    "detection_malware_rootkit_kenga3_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "kenga3_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'kenga3_rootkit' as malware_family) where path in ('/usr/include/. .');"
    }, 
    "detection_download_and_shell": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid, hash.md5 as file_hash_md5, hash.sha1 as file_hash_sha1, hash.sha256 as file_hash_sha256 FROM process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid LEFT JOIN hash ON process_events.path = hash.path WHERE (file_path like '%/wget' OR file_path like '%/curl') AND time IN (select time from process_events where path like '%/%sh');", 
      "description": "Detect when a shell is spawned after using a downloader executable (wget, curl, etc.).", 
      "interval": 1800
    }, 
    "detection_linux_malware_SSHDoor": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT file.path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, 'SSHDoor' as malware_family FROM file WHERE path IN ('/etc/X11/.pr','/etc/gshadow--','/usr/share/polkit-1/policy.in','/usr/share/X11/sessmgr/coredump.in', '/usr/share/polkit-1/policy.out', '/usr/local/include/uconf.h', '/usr/lib/libsoftokn3.so.0', '/usr/lib/libsoftokn3.so.0', '/usr/share/man/hu/sd', '/usr/share/man/man1/sd', '/usr/lib/libt1x.so.1.5', '/usr/lib/libcurl.a.2.1', '/usr/lib/libpanel.so.a.3', '/var/tmp/.pipe.sock', '/usr/share/lsx/.ig.swr', '/usr/share/man/man0/.cache', '/dev/.ctrl', '/usr/include/netda.h', '/tmp/KCtbBo', '/usr/lib/mozilla/extensions/mozzlia.ini', '/tmp/zilog', '/usr/share/man/man5/ttyl.5.gz')", 
      "description": "Detect SSHDoor malware.", 
      "interval": 3600
    }, 
    "detection_malware_rootkit_sadmind_iis_worm": {
      "platform": "linux", 
      "removed": false, 
      "description": "sadmind/iis_worm detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'sadmind_iis_worm' as malware_family) where path in ('/dev/cuc');"
    }, 
    "schedule_queries_health": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT name, interval, executions, output_size, wall_time, (user_time/executions) as avg_user_time, (system_time/executions) as avg_system_time, average_memory, last_executed FROM osquery_schedule;", 
      "description": "Retrieves information about osquery scheduled queries.", 
      "interval": 86400
    }, 
    "detection_malware_rootkit_shkit_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "shkit_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'shkit_rootkit' as malware_family) where path in ('/lib/security/.config', '/etc/ld.so.hash');"
    }, 
    "detection_malware_rootkit_zk_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "zk_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'zk_rootkit' as malware_family) where path in ('/usr/share/.zk', '/usr/share/.zk/zk', '/etc/1ssue.net', '/usr/X11R6/.zk', '/usr/X11R6/.zk/xfs', '/usr/X11R6/.zk/echo', '/etc/sysconfig/console/load.zk');"
    }, 
    "detection_malware_rootkit_fu_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "fu_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'fu_rootkit' as malware_family) where path in ('/sbin/xc', '/usr/include/ivtype.h', '/bin/.lib');"
    }, 
    "detection_jboss_listening_process_suspicious_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_parent LIKE '%/java' AND source_process_parent_commandline LIKE '%org.jboss.Main%' AND (source_process_commandline LIKE '%/etc/passwd' OR source_process_commandline LIKE '%curl %' OR source_process_commandline LIKE '%wget %') AND source_process_parent_process_id IN (SELECT pid from listening_ports);", 
      "description": "Detects a JBoss listening process executing a suspicious command", 
      "interval": "30"
    }, 
    "detection_malware_rootkit_knark_installed": {
      "platform": "linux", 
      "removed": false, 
      "description": "knark_installed detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'knark_installed' as malware_family) where path in ('/proc/knark', '/dev/.pizda', '/dev/.pula', '/dev/.pula');"
    },
    "detection_malware_rootkit_zarwt_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "zarwt_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'zarwt_rootkit' as malware_family) where path in ('/bin/imin', '/bin/imout');"
    },
    "detection_linux_agent_remoteaccess": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as parent_path, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE file_path LIKE '%/cryptcat' OR file_path LIKE '%/dns2tcp%' OR file_path LIKE '%/http-tunnel' OR file_path LIKE '%/weevely';", 
      "description": "Detects common tools for remoteaccess", 
      "interval": 10
    }, 
    "detection_linux_agent_raw_socket_server": {
      "platform": "linux", 
      "interval": 1800, 
      "description": "Detects a process listening for raw sockets from remote addresses", 
      "query": "SELECT processes.pid AS source_process_id, processes.path AS file_path, processes.cmdline AS source_process_commandline, processes.cwd AS current_working_directory, process_open_sockets.local_address AS source_address, process_open_sockets.remote_address AS destination_address, process_open_sockets.local_port AS source_port, process_open_sockets.remote_port AS destination_port FROM process_open_sockets LEFT JOIN processes USING(pid) WHERE remote_address = '0.0.0.0' and protocol = '255' and not (file_path like '/bin/%' or file_path like '/usr/bin/%');"
    }, 
    "detection_malware_rootkit_bobkit_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "bobkit_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'bobkit_rootkit' as malware_family) where path in ('/usr/include/.../', '/usr/lib/.../', '/usr/sbin/.../', '/usr/bin/ntpsx', '/tmp/.bkp', '/usr/lib/.bkit-');"
    }, 
    "iptables": {
      "platform": "linux", 
      "interval": "7200", 
      "description": "Retrieves the current filters and chains per filter in the target system.", 
      "query": "SELECT filter_name, chain, policy as event_action, target, protocol as transport_protocol, src_port, dst_port, src_ip, src_mask, iniface, iniface_mask, dst_ip, dst_mask, outiface, outiface_mask, match FROM iptables;"
    }, 
    "authorized_keys": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT users.uid as source_userid, users.username as source_username, algorithm, key as ssh_authorized_key, key_file as file_name FROM users JOIN authorized_keys USING (uid);", 
      "description": "Lists SSH authorized keys", 
      "interval": 3600
    }, 
    "detection_malware_rootkit_tc2_worm": {
      "platform": "linux", 
      "removed": false, 
      "description": "tc2_worm detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'tc2_worm' as malware_family) where path in ('/usr/info/.tc2k', '/usr/bin/util', '/usr/sbin/initcheck', '/usr/sbin/ldb');"
    }, 
    "detection_malware_vpnfilter": {
      "platform": "linux", 
      "removed": false, 
      "description": "vpnfilter detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'vpnfilter' as malware_family) where path in ('/var/run/vpnfilterm', '/var/run/vpnfilterw', '/var/msvf.pid', '/var/run/msvf.pid', '/var/run/vpnfilterm', '/var/run/tord/hidden_ssh', '/var/msvf.pid');"
    }, 
    "detection_couchdb_process_executing_shell_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_parent_commandline LIKE '%/couchdb %' AND source_process_commandline LIKE '%sh -c %' AND (file_path LIKE '%/dash' OR file_path LIKE '%/bash' OR file_path LIKE '%/sh');", 
      "description": "Detects a CouchDB process spawning a shell process", 
      "interval": "30"
    }, 
    "detection_malware_rootkit_esrk_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "esrk_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'esrk_rootkit' as malware_family) where path in ('/usr/lib/tcl5.3');"
    }, 
    "detection_linux_agent_webapplicationattacks": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as parent_path, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE file_path LIKE '%/jboss-win' OR file_path LIKE '%/jboss-linux' OR file_path LIKE '%/arachni_web' OR file_path LIKE '%/burpsuite' OR file_path LIKE '%/dirbuster' OR file_path LIKE '%/gobuster' OR file_path LIKE '%/joomscan' OR file_path LIKE '%/proxystrike' OR file_path LIKE '%/webscarab' OR file_path LIKE '%/webshag-cli' OR file_path LIKE '%/webslayer' OR file_path LIKE '%/websploit' OR file_path LIKE '%/wpscan' OR file_path LIKE '%/xsser' OR file_path LIKE '%/zaproxy';", 
      "description": "Detects common tools for webapplicationattacks", 
      "interval": 10
    }, 
    "detection_samba_process_executing_shell_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_parent_commandline LIKE '%/smbd %' AND (file_path LIKE '%/dash' OR file_path LIKE '%/bash' OR file_path LIKE '%/sh');", 
      "description": "Detects a Samba process spawning a shell process", 
      "interval": "30"
    }, 
    "detection_linux_agent_base64perl": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_commandline LIKE '%exec(decode_base64%';", 
      "description": "Detects command line execution of base64 encoded perl scripts", 
      "interval": 10
    }, 
    "firefox_addons": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT users.uid as source_userid, users.username as source_username, name as package_name, identifier as rep_device_rule_id, version as package_version, firefox_addons.description, source_url, creator as package_source, path as file_path FROM users JOIN firefox_addons USING (uid);", 
      "description": "List installed Firefox add-ons", 
      "interval": 3600
    }, 
    "detection_malware_rootkit_rh_sharpe": {
      "platform": "linux", 
      "removed": false, 
      "description": "rh_sharpe detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'rh_sharpe' as malware_family) where path in ('/bin/.ps', '/usr/bin/cleaner', '/usr/bin/slice', '/usr/bin/vadim', '/usr/bin/.ps', '/bin/.lpstree', '/usr/bin/.lpstree', '/usr/bin/lnetstat', '/bin/lnetstat', '/usr/bin/ldu', '/bin/ldu', '/usr/bin/lkillall', '/bin/lkillall', '/usr/include/rpcsvc/du');"
    }, 
    "detection_jenkins_listening_process_suspicious_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_parent LIKE '%/java' AND source_process_parent_commandline LIKE '%jenkins.war%' AND (source_process_commandline LIKE '%/etc/passwd' OR source_process_commandline LIKE '%curl %' OR source_process_commandline LIKE '%wget %') AND source_process_parent_process_id IN (SELECT pid from listening_ports);", 
      "description": "Detects a Jenkins listening process executing a suspicious command", 
      "interval": "30"
    }, 
    "detection_malware_rootkit_loc_rookit": {
      "platform": "linux", 
      "removed": false, 
      "description": "loc_rookit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'loc_rookit' as malware_family) where path in ('/tmp/xp', '/tmp/kidd0.c', '/tmp/kidd0');"
    }, 
    "detection_malware_rootkit_tuxkit_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "tuxkit_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'tuxkit_rootkit' as malware_family) where path in ('/dev/tux', '/usr/bin/xsf', '/usr/bin/xchk');"
    }, 
    "detection_linux_agent_torcommunications": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid from process_events WHERE source_process_commandline LIKE '%tor --defaults-torrc%' OR source_process_commandline LIKE '%--class Tor Browser%' OR source_process_commandline LIKE '%usewithtor %' OR source_process_commandline LIKE '%torify %' OR source_process_commandline LIKE '%torsocks %' OR source_process_commandline LIKE '%proxychains %' OR source_process_commandline LIKE '%tsocks %';", 
      "description": "Detects processes communicating through the TOR network", 
      "interval": 10
    }, 
    "detection_malware_rootkit_lrk_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "lrk_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'lrk_rootkit' as malware_family) where path in ('/dev/ida/.inet');"
    }, 
    "file_events": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT users.username as source_username, file_events.action as action, file_events.category as content_category, file_events.target_path as file_path, file_events.uid as source_userid, file_events.gid as user_group_id, file_events.mode as file_permission, file_events.size as file_kb_size, file_events.mtime as timestamp_occured, file_events.sha1 as file_hash_sha1, file_events.sha256 as file_hash_sha256 FROM file_events LEFT JOIN users USING (uid) WHERE target_path NOT LIKE '%-new' and target_path NOT LIKE '%.dpkg-tmp';", 
      "description": "Retrieve FIM events from the eventing system.", 
      "interval": 10
    }, 
    "detection_linux_agent_empyre": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_commandline LIKE '%ps -ef | grep Little%';", 
      "description": "Detects looking for the Little Snitch firewall process, as performed by the Empyre backdoor", 
      "interval": 10
    }, 
    "crontab": {
      "platform": "linux", 
      "interval": "3600", 
      "description": "List crontab entries", 
      "query": "SELECT cron.command as source_process_commandline, cron.path as file_path FROM crontab as cron;"
    }, 
    "detection_malware_rootkit_beastkit_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "beastkit_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'beastkit_rootkit' as malware_family) where path in ('/usr/local/bin/bin', '/usr/man/.man10', '/usr/sbin/arobia', '/usr/lib/elm/arobia', '/usr/local/bin/.../bktd');"
    }, 
    "detection_malware_rootkit_t0rn_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "t0rn_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 't0rn_rootkit' as malware_family) where path in ('/usr/src/.puta', '/usr/info/.t0rn', '/lib/ldlib.tk', '/etc/ttyhash', '/sbin/xlogin');"
    }, 
    "detection_malware_rootkit_optickit": {
      "platform": "linux", 
      "removed": false, 
      "description": "optickit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'optickit' as malware_family) where path in ('/usr/bin/xchk', '/usr/bin/xsf', '/usr/bin/xsf', '/usr/bin/xchk');"
    }, 
    "detection_linux_agent_stresstesting": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as parent_path, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE file_path LIKE '%/inviteflood' OR file_path LIKE '%/rtpflood' OR file_path LIKE '%/slowhttptest' OR file_path LIKE '%/termineter';", 
      "description": "Detects common tools for stresstesting", 
      "interval": 10
    }, 
    "detection_linux_agent_encodedbash": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.ctime as encoded_time, p2.ctime as bash_time, p2.cmdline as bash_process_commandline, process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events INNER JOIN process_events p2 ON p2.cmdline = 'bash' AND parent_uid == p2.uid and p2.ctime < (process_events.ctime + 20) and p2.ctime > (process_events.ctime - 20) LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_commandline LIKE '%base64 -d%' OR source_process_commandline LIKE '%xxd -r -p%';", 
      "description": "Detects command line execution of encoded bash commands", 
      "interval": 60
    }, 
    "detection_linux_agent_process_tmpfolder": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE file_path LIKE '/tmp/%';", 
      "description": "Detects processes running from tmp", 
      "interval": 10
    },
    "detection_malware_rootkit_romanian_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "romanian_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'romanian_rootkit' as malware_family) where path in ('/usr/sbin/initdl', '/usr/sbin/xntps');"
    }, 
    "listening_ports": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT protocol as transport_protocol, family, address as policy_address, pid as source_process_id, listening_ports.port as source_port, processes.path as file_path, processes.cmdline as source_process_commandline FROM listening_ports JOIN processes USING (pid)  WHERE transport_protocol != 0;", 
      "description": "List listening ports", 
      "interval": "1800"
    }, 
    "docker_container_rw_mount": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT dc.id as container_id, dc.image as container_image, dc.name as container_name, dcm.source as file_path, dcm.destination as registry_path, dcm.mode as file_permission FROM docker_containers dc, docker_container_mounts dcm WHERE dc.id=dcm.id AND dcm.mode='rw';", 
      "description": "Get a list with the Docker container mounted filesystems configured as writable.", 
      "interval": 86400
    }, 
    "detection_linux_postgres_process_executing_suspicious_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_parent_commandline LIKE '%/postgres' AND process_events.path IN (SELECT path FROM process_events WHERE path LIKE '%/dash' UNION SELECT path FROM process_events WHERE path LIKE '%/bash' UNION SELECT path FROM process_events WHERE path LIKE '%/python' UNION SELECT path FROM process_events WHERE path LIKE '%/perl' UNION SELECT path FROM process_events WHERE path LIKE '%/php');", 
      "description": "Detects a Postgres process spawning a suspicious process", 
      "interval": 30
    }, 
    "detection_malware_rootkit_madalin_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "madalin_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'madalin_rootkit' as malware_family) where path in ('/usr/include/icekey.h', '/usr/include/iceconf.h', '/usr/include/iceseed.h');"
    }, 
    "detection_suspicious_ld_preload_environment_variable": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_envs.pid as source_process_id, process_envs.key as environment_variable_key, process_envs.value as environment_variable_value, processes.name as source_process, processes.path as file_path, processes.cmdline as source_process_commandline, processes.cwd as current_working_directory FROM process_envs join processes USING (pid) WHERE key = 'LD_PRELOAD';", 
      "description": "Detects usage of the ld_preload env variable ", 
      "interval": "60"
    }, 
    "detection_linux_agent_selinux_disabled": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT action as event_action, category as content_category, target_path as file_path, uid as source_userid, gid as user_group_id, mode as file_permission, size as file_kb_size, mtime as timestamp_occured, sha1, sha256 FROM file_events WHERE (file_path = '/sys/fs/selinux/enforce' AND sha1 = 'b6589fc6ab0dc82cf12099d1c2d40ab994e8410c' AND event_action = 'UPDATED') OR (file_path = '/selinux/enforce' AND sha1 = 'b6589fc6ab0dc82cf12099d1c2d40ab994e8410c' AND event_action = 'UPDATED');", 
      "description": "Detects disabling SELinux", 
      "interval": 10
    }, 
    "process_events": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid, hash.md5 as file_hash_md5, hash.sha1 as file_hash_sha1, hash.sha256 as file_hash_sha256 FROM process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid LEFT JOIN hash ON process_events.path = hash.path WHERE file_path NOT IN ('/bin/grep', '/bin/cat', '/bin/bash', '/bin/ps', '/usr/bin/tr', '/bin/mkdir', '/bin/uname', '/bin/cp', '/usr/bin/make', '/bin/sed', '/bin/rm', '/usr/bin/dpkg', '/usr/bin/cat', '/usr/bin/gpg', '/usr/bin/gcc-5', '/usr/bin/wc', '/usr/bin/mawk', '/bin/sleep', '/usr/bin/id', '/usr/bin/head', '/usr/bin/locale', '/bin/tar', '/bin/run-parts', '/bin/hostname', '/bin/gzip', '/usr/bin/xargs', '/bin/ls');", 
      "description": "Retrieves new process creation information", 
      "interval": 10
    }, 
    "sudoers": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT header as user_resource, rule_details as policy FROM sudoers;", 
      "description": "Retrieve sudoers information.", 
      "interval": 3600
    }, 
    "detection_linux_agent_exploitation": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as parent_path, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE file_path LIKE '%/msfpc' OR file_path LIKE '%/routersploit' OR file_path LIKE '%/searchsploit' OR file_path LIKE '%/msfconsole' OR file_path LIKE '%/msfdb' OR file_path LIKE '%/msfd' OR file_path LIKE '%/msfcli' OR file_path LIKE '%/msfrpc' OR file_path LIKE '%/msfrpcd' OR file_path LIKE '%/msfvenom' OR file_path LIKE '%/sqlmap' OR file_path LIKE '%/crackle' OR file_path LIKE '%/beef-xss' OR file_path LIKE '%/backdoor-factory' OR file_path LIKE '%/armitage' OR file_path LIKE '%/smbtrap';", 
      "description": "Detects common tools for exploitation", 
      "interval": 10
    }, 
    "detection_malware_rootkit_monkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "monkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'monkit' as malware_family) where path in ('/lib/defs');"
    }, 
    "detection_linux_agent_informationgathering": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as parent_path, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE file_path LIKE '%/cookie-cadger' OR file_path LIKE '%/dnmap_client' OR file_path LIKE '%/ghost-phisher' OR file_path LIKE '%/hping3' OR file_path LIKE '%/masscan' OR file_path LIKE '%/nbtscan-unixwiz' OR file_path LIKE '%/nmap' OR file_path LIKE '%/setoolkit' OR file_path LIKE '%/smbmap' OR file_path LIKE '%/smtp-user-enum' OR file_path LIKE '%/dirsearch' OR file_path LIKE '%/sublist3r';", 
      "description": "Detects common tools for informationgathering", 
      "interval": 10
    }, 
    "detection_malware_rootkit_telekit_trojan": {
      "platform": "linux", 
      "removed": false, 
      "description": "telekit_trojan detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'telekit_trojan' as malware_family) where path in ('/dev/hda06', '/usr/info/libc1.so');"
    }, 
    "detection_malware_rootkit_showtee_romanian_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "showtee_/_romanian_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'showtee_romanian_rootkit' as malware_family) where path in ('/usr/include/addr.h', '/usr/include/file.h', '/usr/include/syslogs.h', '/usr/include/proc.h');"
    }, 
    "user_ssh_keys": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT uid as source_userid, gid as user_group_id, username as source_username, path as file_path,encrypted FROM users JOIN user_ssh_keys USING (uid);", 
      "description": "Retrieve user SSH keys.", 
      "interval": 3600
    }, 
    "detection_nodejs_app_executing_shell_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE (source_process_parent LIKE '%nodejs ' OR source_process_parent_commandline LIKE 'node %' OR source_process_parent_commandline LIKE 'nodejs %') AND source_process_commandline LIKE '%sh -c%' AND (file_path LIKE '%/dash' OR file_path LIKE '%/bash' OR file_path LIKE '%/sh') and source_process_parent_process_id IN (SELECT pid from listening_ports);", 
      "description": "Detects a nodejs process serving an app that spawns a shell process", 
      "interval": "30"
    }, 
    "chrome_extensions": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT users.uid as source_userid, users.username as source_username, name as package_name, identifier as rep_device_rule_id, version as package_version, chrome_extensions.description, update_url, author as package_source, persistent, path as file_path FROM users JOIN chrome_extensions USING (uid);", 
      "description": "List installed Chrome extensions", 
      "interval": 3600
    }, 
    "detection_malware_rootkit_hidr00tkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "hidr00tkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'hidr00tkit' as malware_family) where path in ('/var/lib/games/.k');"
    }, 
    "usb_devices": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT class as device_class, model as device_name, model_id, protocol, removable, serial, subclass, vendor as device_vendor, vendor_id, version FROM usb_devices;", 
      "description": "List USB Devices.", 
      "interval": 1800
    }, 
    "detection_malware_rootkit_bash_door": {
      "platform": "linux", 
      "removed": false, 
      "description": "bash_door detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'bash_door' as malware_family) where path in ('/tmp/mcliZokhb', '/tmp/mclzaKmfa');"
    }, 
    "last": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT last.username as source_username, last.tty as tty_terminal, last.pid as source_process_id, last.host as source_address, parent_processes.path as source_process FROM last LEFT OUTER JOIN processes parent_processes ON last.pid = parent_processes.pid WHERE (strftime('%s','now') - last.time) < 1000 AND tty_terminal != '~' and source_username != '' AND source_address != '' AND source_address NOT LIKE '%(%';", 
      "description": "List latest logins.", 
      "interval": 500
    }, 
    "detection_malware_rootkit_trk_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "trk_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'trk_rootkit' as malware_family) where path in ('/usr/bin/soucemask', '/usr/bin/sourcemask');"
    }, 
    "detection_malware_rootkit_anonoiyng_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "anonoiyng_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'anonoiyng_rootkit' as malware_family) where path in ('/usr/sbin/mech', '/usr/sbin/kswapd');"
    }, 
    "detection_linux_agent_vulnerabilityanalysis": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as parent_path, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE file_path LIKE '%/cisco-torch' OR file_path LIKE '%/dbpwaudit' OR file_path LIKE '%/hexorbase' OR file_path LIKE '%/ohrwurm' OR file_path LIKE '%/openvassd' OR file_path LIKE '%/openvas-setup' OR file_path LIKE '%/openvasmd' OR file_path LIKE '%/oscanner' OR file_path LIKE '%/powerfuzzer' OR file_path LIKE '%/siparmyknife' OR file_path LIKE '%/sqlninja' OR file_path LIKE '%/sqlsus' OR file_path LIKE '%/unix-privesc-check';", 
      "description": "Detects common tools for vulnerabilityanalysis", 
      "interval": 10
    }, 
    "detection_malware_rootkit_apa_kit": {
      "platform": "linux", 
      "removed": false, 
      "description": "apa_kit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'apa_kit' as malware_family) where path in ('/usr/share/.aPa');"
    }, 
    "detection_malware_rootkit_tribe_bot": {
      "platform": "linux", 
      "removed": false, 
      "description": "tribe_bot detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'tribe_bot' as malware_family) where path in ('/dev/wd4');"
    }, 
    "kernel_info": {
      "platform": "linux", 
      "interval": 36000, 
      "description": "Retrieves information from the current kernel in the target system.", 
      "query": "SELECT arguments as source_process_commandline, device as device_name, directory as file_path, md5 as file_hash_md5, path as file_name, sha1 as file_hash_sha1, sha256 as file_hash_sha256, version as package_version FROM kernel_info LEFT JOIN hash USING (path);"
    }, 
    "detection_malware_rootkit_adore_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "adore_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'adore_rootkit' as malware_family) where path in ('/etc/bin/ava', '/etc/sbin/ava');"
    }, 
    "database_health": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT sum(size) / 1024 as file_kb_size, count(path) as num_files FROM file WHERE path like '/var/osquery/osquery.db/%%';", 
      "description": "Retrieves size of osquery database.", 
      "interval": 86400
    }, 
    "detection_elasticsearch_listening_process_suspicious_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_parent LIKE '%/java' AND source_process_parent_commandline LIKE '%/elasticsearch%' AND (source_process_commandline LIKE '%/etc/passwd' OR source_process_commandline LIKE '%curl %' OR source_process_commandline LIKE '%wget %') AND source_process_parent_process_id IN (SELECT pid from listening_ports);", 
      "description": "Detects a ElasticSearch listening process executing a suspicious command", 
      "interval": "30"
    }, 
    "detection_weblogic_process_executing_shell_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_parent_commandline LIKE '%-Dweblogic%' AND source_process_commandline LIKE '%sh -c %' AND (file_path LIKE '%/dash' OR file_path LIKE '%/bash' OR file_path LIKE '%/sh');", 
      "description": "Detects a WebLogic process spawning a shell process", 
      "interval": "30"
    },
    "detection_malware_rootkit_solaris_worm": {
      "platform": "linux", 
      "removed": false, 
      "description": "solaris_worm detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'solaris_worm' as malware_family) where path in ('/var/adm/.profile', '/var/spool/lp/.profile', '/var/adm/sa/.adm', '/var/spool/lp/admins/.lp');"
    }, 
    "detection_linux_agent_syslog_not_running": {
      "platform": "linux", 
      "removed": false, 
      "query": "select distinct (case when (select count(name) from processes where name LIKE 'syslog-ng' OR name LIKE 'syslogd' OR name LIKE 'rsyslogd')=0 then 'stopped' else 'running' end) as event_action;", 
      "description": "Detects if syslog is running on they system.", 
      "interval": 300
    }, 
    "detection_malware_rootkit_ramen_worm": {
      "platform": "linux", 
      "removed": false, 
      "description": "ramen_worm detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'ramen_worm' as malware_family) where path in ('/usr/lib/ldlibps.so', '/usr/lib/ldlibns.so', '/usr/lib/ldliblogin.so', '/usr/src/.poop', '/tmp/ramen.tgz', '/etc/xinetd.d/asp');"
    }, 
    "detection_malware_rootkit_scalper_installed": {
      "platform": "linux", 
      "removed": false, 
      "description": "scalper_installed detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'scalper_installed' as malware_family) where path in ('/tmp/.uua', '/tmp/.a');"
    }, 
    "detection_malware_rootkit_55808.a_worm": {
      "platform": "linux", 
      "removed": false, 
      "description": "55808.a_worm detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT '55808.a_worm' as malware_family) where path in ('/tmp/.../a', '/tmp/.../r');"
    }, 
    "rpm_packages": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT name as package_name, version as package_version, release, source, size as file_kb_size, sha1 as file_hash_sha1, arch as package_architecture FROM rpm_packages;", 
      "description": "Retrieves all the installed RPM packages in the target Linux system.", 
      "interval": 3600
    }, 
    "detection_linux_agent_python_httpserver": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT pid as source_process_id, listening_ports.port as source_port, processes.path as file_path, processes.cmdline as source_process_commandline FROM listening_ports JOIN processes USING (pid) WHERE source_process_commandline LIKE 'python%' and source_process_commandline LIKE '%SimpleHTTPServer%' OR source_process_commandline like '%http.server%';", 
      "description": "Detecting Python webserver one-liner.", 
      "interval": 60
    }, 
    "suspicious_shared_memory": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT pid as source_process_id, creator_uid as source_userid, size, processes.name as source_process from shared_memory JOIN processes USING (pid) WHERE size > 3145727 and permissions in (666, 667, 676, 766, 677, 767, 777);", 
      "description": "Detects suspicious shared memory", 
      "interval": 1800
    }, 
    "detection_malware_rootkit_showtee": {
      "platform": "linux", 
      "removed": false, 
      "description": "showtee detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'showtee' as malware_family) where path in ('/usr/lib/.egcs', '/usr/lib/.wormie', '/usr/lib/.kinetic', '/usr/lib/liblog.o', '/usr/include/cron.h', '/usr/include/chk.h');"
    }, 
    "detection_malware_rootkit_override_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "override_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'override_rootkit' as malware_family) where path in ('/dev/grid-hide-pid-', '/dev/grid-unhide-pid-', '/dev/grid-show-pids', '/dev/grid-hide-port-', '/dev/grid-unhide-port-');"
    }, 
    "detection_linux_agent_crypto_miner": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.pid AS source_process_id, process_events.path AS file_path, process_events.cmdline AS source_process_commandline, process_events.cwd AS current_working_directory FROM process_events WHERE source_process_commandline like '%cryptonight%' OR source_process_commandline like '%stratum+tcp%' OR source_process_commandline like '%/xmrig%' OR source_process_commandline like '%xmrig %' OR source_process_commandline like '%cpuminer%' OR source_process_commandline like '%ccminer%' OR source_process_commandline like '%Circle_MI%' OR source_process_commandline like '%get.bi-chi.com%' OR source_process_commandline like '%hashvault.pro%' OR source_process_commandline like '%nanopool%' OR source_process_commandline like '%minexmr.com%' OR source_process_commandline like '%minergate%' OR source_process_commandline like '%monerohash%' OR source_process_commandline like '%nicehash%' OR source_process_commandline like '%dwarfpool%' OR source_process_commandline like '%suprnova%' OR source_process_commandline like '%xmrpool%';", 
      "description": "Detects processes mining crypto currencies or connecting to crypto mining pools", 
      "interval": 10
    }, 
    "detection_jenkins_post_exploitation_activity": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE (source_process_parent_commandline like '/usr/bin/java%' AND source_process_parent_commandline like '%jenkins%') AND (source_process_commandline like '%/etc/passwd%' OR source_process_commandline like '%whoami%' OR source_process_commandline like 'id' OR source_process_commandline like '%hostname%' OR source_process_commandline like '%useradd%' OR source_process_commandline like '%netstat%' OR source_process_commandline like '%wget %' OR source_process_commandline like '%curl %');", 
      "description": "Detect commands executed by Jenkins Groovy scripts.", 
      "interval": "300"
    }, 
    "detection_linux_agent_edit_sshd": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.pid as source_process_parent_process_id, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE (source_process_commandline LIKE 'mv %/sshd %') OR (source_process_commandline LIKE 'cp %/sshd %') OR (source_process_commandline LIKE 'chmod %/sshd %') OR (source_process_commandline LIKE 'rm %/sshd %') OR (source_process_commandline LIKE 'sudo mv %/sshd %') OR (source_process_commandline LIKE 'sudo chmod %/sshd %') OR (source_process_commandline LIKE 'sudo rm %/sshd %');", 
      "description": "Detects manual change to the ssh server binary", 
      "interval": 10
    }, 
    "detection_malware_rootkit_rsha": {
      "platform": "linux", 
      "removed": false, 
      "description": "rsha detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'rsha' as malware_family) where path in ('/usr/bin/kr4p', '/usr/bin/n3tstat', '/usr/bin/chsh2', '/usr/bin/slice2', '/etc/rc.d/rsha');"
    }, 
    "detection_whois_data_exfiltration": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT users.uid as source_userid, users.username as source_username, command as source_process_commandline, history_file as file_name FROM shell_history LEFT JOIN users USING (uid) WHERE shell_history.uid IN (SELECT uid from users) AND (command LIKE '%whois %cat %' OR command LIKE '%whois %base64 %');", 
      "description": "Detect whois execution with suspicious arguments.", 
      "interval": 3600
    }, 
    "os_version": {
      "platform": "linux", 
      "interval": 36000, 
      "description": "Retrieves information from the operating system in the target system.", 
      "query": "SELECT * FROM os_version;"
    }, 
    "kernel_modules": {
      "platform": "linux", 
      "interval": "3600", 
      "description": "Linux kernel modules both loaded and within the load search path.", 
      "query": "SELECT name as file_name, size as file_kb_size, status, used_by from kernel_modules;"
    }, 
    "docker_containers_processes": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT id as container_id, docker_containers.name as container_name, image as container_image, image_id as container_image_id, cmdline as source_process_commandline, docker_container_processes.pid as source_process_id, docker_container_processes.name as source_process, parent as source_process_parent_id, user as source_username FROM docker_containers LEFT JOIN docker_container_processes USING (id);", 
      "description": "Retrieves information about docker containers.", 
      "interval": 1800
    }, 
    "detection_malware_rootkit_shitc": {
      "platform": "linux", 
      "removed": false, 
      "description": "shitc detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'shitc' as malware_family) where path in ('/bin/home', '/sbin/home', '/usr/sbin/in.slogind');"
    }, 
    "detection_linux_malware_winnti": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, 'Winnti Linux' as malware_family FROM file WHERE path IN (SELECT path FROM file WHERE path like '/tmp/libxselinux%' UNION SELECT path FROM file WHERE path like '/lib/libxselinux%' UNION SELECT path FROM file WHERE path like '/usr/sbin/.ifup-local');", 
      "description": "Winnti Linux detection", 
      "interval": 3600
    }, 
    "detection_linux_agent_apparmor_disabled": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.pid as source_process_parent_process_id, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE (source_process_commandline LIKE '%stop apparmor%') OR (source_process_commandline LIKE '%apparmor remove%') OR (source_process_commandline LIKE '%disable apparmor%') OR (source_process_commandline LIKE '%apparmor teardown%') OR (source_process_commandline LIKE '%apparmor remove%') OR (source_process_commandline LIKE '%remove apparmor%');", 
      "description": "Detects disabling apparmor", 
      "interval": 10
    }, 
    "detection_linux_agent_base64python": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_commandline LIKE '%exec(base64.b64decode%';", 
      "description": "Detects command line execution of base64 encoded python scripts", 
      "interval": 10
    }, 
    "detection_malware_rootkit_suckit_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "suckit_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'suckit_rootkit' as malware_family) where path in ('/lib/.x', '/lib/sk');"
    }, 
    "detection_linux_connection_metadata_service": {
      "platform": "linux", 
      "interval": 30, 
      "description": "Detects a process communicating with the metadata service.", 
      "query": "SELECT action as event_action, pid as source_process_id, path as source_process, success as event_outcome, remote_address as destination_address, remote_port as destination_port, time as timestamp_occured, count(path) as base_event_count FROM socket_events WHERE destination_address = '169.254.169.254' AND source_process NOT LIKE '%amazon-ssm-agent' GROUP BY source_process;"
    }, 
    "detection_linux_exploit_users_uid_intmax": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT uid as source_userid ,gid as user_group_id, uid_signed, gid_signed, username as source_username, directory as file_path, shell as file_name from users where uid > 2147483647;", 
      "description": "Allows a user with a uid greater than INT_MAX to successfully execute any systemctl command. CVE-2018-19788", 
      "interval": 3600
    }, 
    "kernel_integrity": {
      "platform": "linux", 
      "interval": 36000, 
      "description": "Various Linux kernel integrity checked attributes.", 
      "query": "SELECT sycall_addr_modified, text_segment_hash FROM kernel_integrity;"
    }, 
    "detection_malware_rootkit_illogic_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "illogic_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'illogic_rootkit' as malware_family) where path in ('/lib/security/.config', '/usr/bin/sia', '/etc/ld.so.hash');"
    }, 
    "removable_usb_devices": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT class as device_class, model as device_name, model_id, protocol, removable, serial, subclass, vendor as device_vendor, vendor_id, version FROM usb_devices WHERE removable = 1;", 
      "description": "List USB Devices.", 
      "interval": 1800
    }, 
    "detection_tomcat_process_executing_shell_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_parent_commandline LIKE '%/tomcat %' AND source_process_commandline LIKE '%sh -c %' AND (file_path LIKE '%/dash' OR file_path LIKE '%/bash' OR file_path LIKE '%/sh');", 
      "description": "Detects a Tomcat process spawning a shell process", 
      "interval": "30"
    }, 
    "detection_malware_rootkit_maniac_rk": {
      "platform": "linux", 
      "removed": false, 
      "description": "maniac_rk detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'maniac_rk' as malware_family) where path in ('/usr/bin/mailrc');"
    }, 
    "detection_malware_rootkit_adore_worm": {
      "platform": "linux", 
      "removed": false, 
      "description": "adore_worm detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'adore_worm' as malware_family) where path in ('/dev/.shit/red.tgz', '/usr/lib/libt', '/usr/bin/adore');"
    }, 
    "dns_resolvers": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT type, address as dns_server_address, netmask as source_netmask, options FROM dns_resolvers;", 
      "description": "Lists DNS resolvers", 
      "interval": 3600
    }, 
    "hardware_events": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT * FROM hardware_events;", 
      "description": "Retrieve hardware events from the eventing system.", 
      "interval": 10
    }, 
    "detection_linux_agent_ssh_decorate_backdoor": {
      "platform": "linux", 
      "interval": 3600, 
      "description": "Detects installations of the python ssh-decorate package prior to 0.33 - which contain a backdoor", 
      "query": "SELECT path as file_path from python_packages where name = 'ssh-decorate' and version < '0.33'"
    }, 
    "detection_malware_rootkit_slapper_installed": {
      "platform": "linux", 
      "removed": false, 
      "description": "slapper_installed detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'slapper_installed' as malware_family) where path in ('/tmp/.bugtraq', '/tmp/.bugtraq.c', '/tmp/.cinik', '/tmp/.b', '/tmp/httpd', '/tmp./update', '/tmp/.unlock', '/tmp/.font-unix/.cinik', '/tmp/.cinik');"
    }, 
    "docker_containers": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT id as container_id, name as container_name, image as container_image, image_id as container_image_id, state as container_state, command as source_process_commandline from docker_containers;", 
      "description": "Retrieves information about docker containers.", 
      "interval": 1800
    }, 
    "arp_cache": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT address, mac, interface, permanent FROM arp_cache;", 
      "description": "Retrieves the ARP cache.", 
      "interval": 600
    }, 
    "deb_packages": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT name as package_name, version as package_version, source as package_source, size as file_kb_size, arch as package_architecture, revision as package_revision FROM deb_packages;", 
      "description": "Retrieves all the installed DEB packages in the target Linux system.", 
      "interval": 3600
    }, 
    "events_health": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT name, publisher, type, subscriptions, events, active FROM osquery_events;", 
      "description": "Retrieves information about osquery subscriptions.", 
      "interval": 86400
    }, 
    "detection_malware_rootkit_monkit_found": {
      "platform": "linux", 
      "removed": false, 
      "description": "monkit_found detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'monkit_found' as malware_family) where path in ('/usr/lib/libpikapp.a');"
    }, 
    "detection_malicious_linux_butter_folder": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT file.path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, 'Bread and Butter' as malware_family FROM file WHERE path like '/%/seconfig/%%';", 
      "description": "Bread and Butter detection.", 
      "interval": 3600
    }, 
    "detection_linux_malware_supremebackdoor": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, 'Supreme Backdoor' as malware_family FROM file WHERE path IN (SELECT path FROM file WHERE path like '%/.local/share/bbauto' UNION SELECT path FROM file WHERE path like '%/.config/autostart/none.desktop');", 
      "description": "Supreme backdoor detection", 
      "interval": 3600
    }, 
    "detection_unicorn_process_executing_shell_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE (source_process_parent_commandline LIKE '%unicorn %' AND source_process_parent_commandline LIKE '% -c %') AND source_process_commandline LIKE '%sh -c%' AND (file_path LIKE '%/dash' OR file_path LIKE '%/bash' OR file_path LIKE '%/sh') and source_process_parent_process_id IN (SELECT pid from listening_ports);", 
      "description": "Detects a Unicorn process spawning a shell process", 
      "interval": "30"
    }, 
    "detection_malware_rootkit_cback_worm": {
      "platform": "linux", 
      "removed": false, 
      "description": "cback_worm detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'cback_worm' as malware_family) where path in ('/tmp/cback', '/tmp/derfiq');"
    }, 
    "detection_malware_openssh_backdoor_kit": {
      "platform": "linux", 
      "removed": false, 
      "description": "Default paths used in openssh-backdoor-kit. Used by the Energetic Bear actor.", 
      "interval": 3600, 
      "query": "SELECT path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'openssh_backdoor_kit' as malware_family) where path in ('/var/tmp/.pipe.sock', '/tmp/.zZtemp', '/tmp/.sniffssh');"
    }, 
    "suid_bin": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT path as file_path, username as source_username, groupname as source_user_group, permissions as file_permission FROM suid_bin;", 
      "description": "List SUID binaries", 
      "interval": "43200"
    }, 
    "detection_malware_rootkit_bmbl_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "bmbl_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'bmbl_rootkit' as malware_family) where path in ('/etc/.bmbl', '/etc/.bmbl/sk');"
    }, 
    "detection_malware_rootkit_enye_sec_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "enye_sec_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'enye_sec_rootkit' as malware_family) where path in ('/etc/.enyelkmHIDE^IT.ko');"
    }, 
    "detection_malware_rootkit_shv5_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "shv5_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'shv5_rootkit' as malware_family) where path in ('/lib/libsh.so', '/usr/lib/libsh');"
    }, 
    "detection_malware_rootkit_phalanx_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "phalanx_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'phalanx_rootkit' as malware_family) where path in ('/usr/share/.home*', '/usr/share/.home*/tty', '/etc/host.ph1', '/bin/host.ph1');"
    }, 
    "detection_malware_rootkit_volc_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "volc_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'volc_rootkit' as malware_family) where path in ('/usr/lib/volc', '/usr/bin/volc');"
    }, 
    "detection_activemq_listening_process_suspicious_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_parent LIKE '%/java' AND source_process_parent_commandline LIKE '%/activemq%' AND (source_process_commandline LIKE '%/etc/passwd' OR source_process_commandline LIKE '%curl %' OR source_process_commandline LIKE '%wget %') AND source_process_parent_process_id IN (SELECT pid from listening_ports);", 
      "description": "Detects a ActiveMQ listening process executing a suspicious command", 
      "interval": "30"
    },
    "detection_java_listening_process_suspicious_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE source_process_parent LIKE '%/java' AND (source_process_commandline LIKE '%/etc/passwd' OR source_process_commandline LIKE '%curl %' OR source_process_commandline LIKE '%wget %') AND source_process_parent_process_id IN (SELECT pid from listening_ports);", 
      "description": "Detects a Java listening process executing a suspicious command", 
      "interval": "30"
    }, 
    "detection_linux_agent_wirelessattacks": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as parent_path, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE file_path LIKE '%/airbase-ng' OR file_path LIKE '%/airmon-ng' OR file_path LIKE '%/airodump-ng' OR file_path LIKE '%/airtun-ng' OR file_path LIKE '%/bluesnarfer' OR file_path LIKE '%/eapmd5pass' OR file_path LIKE '%/fern-wifi-cracker' OR file_path LIKE '%/freeradius-wpe' OR file_path LIKE '%/giskismet' OR file_path LIKE '%/zbgoodfind' OR file_path LIKE '%/zbdsniff' OR file_path LIKE '%/kismet' OR file_path LIKE '%/packetforge-ng' OR file_path LIKE '%/pixiewps' OR file_path LIKE '%/rtlsdr-scanner' OR file_path LIKE '%/wesside-ng' OR file_path LIKE '%/wifiphisher';", 
      "description": "Detects common tools for wirelessattacks", 
      "interval": 10
    }, 
    "users": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT uid as source_userid, gid as user_group_id, uid_signed, gid_signed, username as source_username, directory as file_path, shell as file_name from users;", 
      "description": "List local users in the system", 
      "interval": "7200"
    }, 
    "detection_malware_rootkit_rk17": {
      "platform": "linux", 
      "removed": false, 
      "description": "rk17 detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'rk17' as malware_family) where path in ('/bin/rtty', '/bin/squit', '/sbin/pback', '/proc/kset', '/usr/src/linux/modules/autod.o', '/usr/src/linux/modules/soundx.o');"
    }, 
    "python_packages": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT name as package_name, version as package_version, summary, path as file_path, author FROM python_packages;", 
      "description": "Retrieve a list of installed Python packages.", 
      "interval": 3600
    }, 
    "detection__flask_process_executing_shell_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE (source_process_parent_commandline LIKE '%flask run' OR source_process_parent_commandline LIKE '%flask shell') AND source_process_commandline LIKE '%sh -c%' AND (file_path LIKE '%/dash' OR file_path LIKE '%/bash' OR file_path LIKE '%/sh') and source_process_parent_process_id IN (SELECT pid from listening_ports);", 
      "description": "Detects a Flask process spawning a shell process", 
      "interval": "30"
    }, 
    "detection_malware_rootkit_ajakit_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "ajakit_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'ajakit_rootkit' as malware_family) where path in ('/lib/.ligh.gh', '/lib/.libgh.gh', '/lib/.libgh-gh', '/dev/tux', '/dev/tux/.proc', '/dev/tux/.file');"
    }, 
    "detection_malware_rootkit_omega_worm": {
      "platform": "linux", 
      "removed": false, 
      "description": "omega_worm detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'omega_worm' as malware_family) where path in ('/dev/chr');"
    }, 
    "detection_malware_rootkit_ldp_worm": {
      "platform": "linux", 
      "removed": false, 
      "description": "ldp_worm detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'ldp_worm' as malware_family) where path in ('/dev/.kork', '/bin/.login', '/bin/.ps');"
    }, 
    "detection_linux_agent_reverse_shell": {
      "platform": "linux", 
      "interval": 30, 
      "description": "Detects a reverse shell", 
      "query": "SELECT process_open_files.path as shell_path, process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid,process_open_sockets.family, process_open_sockets.protocol as protocol_type, process_open_sockets.local_address AS source_address, process_open_sockets.remote_address AS destination_address, process_open_sockets.local_port AS source_port, process_open_sockets.remote_port AS destination_port FROM process_events LEFT OUTER JOIN processes AS parent_processes ON process_events.parent = parent_processes.pid JOIN process_open_sockets ON (process_open_sockets.pid=process_events.pid) LEFT OUTER JOIN process_open_files ON (process_open_sockets.pid = process_open_files.pid) WHERE shell_path like '/dev/tty%' AND (protocol_type = '6' OR protocol_type = '17') AND ( source_process_parent like '%perl%' OR source_process_parent like '%python%' OR source_process_parent like '%nc%' OR source_process_parent like '%ruby%' OR source_process_parent like '%bash%');"
    }, 
    "apt_sources": {
      "platform": "linux", 
      "removed": false, 
      "query": "select * from apt_sources;", 
      "description": "Retrieves all the APT sources to install packages from in the target Linux system.", 
      "interval": "36000"
    }, 
    "detection_linux_agent_ssh_tunnel": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.pid AS source_process_id, process_events.path AS file_path, process_events.cmdline AS source_process_commandline, process_events.cwd AS current_working_directory, socket_events.action AS event_action, socket_events.family, socket_events.protocol as transport_protocol, socket_events.local_address AS source_address, socket_events.local_port AS source_port FROM process_events join socket_events ON process_events.pid=socket_events.pid WHERE event_action='bind' and source_process_commandline like 'ssh %' and source_process_commandline like '%-L%';", 
      "description": "Detects the creation of tunnels using ssh", 
      "interval": 10
    }, 
    "detection_django_process_executing_shell_command": {
      "platform": "linux", 
      "removed": "false", 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd AS current_working_directory, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE (source_process_parent LIKE '%django-admin%' OR source_process_parent_commandline LIKE '%manage.py runscript%' OR source_process_parent_commandline LIKE '%manage.py runserver%' OR source_process_parent_commandline LIKE '%manage.py shell%' OR source_process_parent_commandline LIKE 'python -m django%') AND source_process_commandline LIKE '%sh -c%' AND (file_path LIKE '%/dash' OR file_path LIKE '%/bash' OR file_path LIKE '%/sh') and source_process_parent_process_id IN (SELECT pid from listening_ports);", 
      "description": "Detects a Django process spawning a shell process", 
      "interval": "30"
    }, 
    "detection_linux_agent_malware_killing_miners": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as source_process_parent FROM process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid LEFT JOIN hash ON process_events.path = hash.path where source_process_commandline like '%kill%' and (source_process_commandline like '%AnXqV.yam%' or source_process_commandline like '%BI5zj%' or source_process_commandline like '%Duck.sh%' or source_process_commandline like '%Guard.sh%' or source_process_commandline like '%JnKihGjn%' or source_process_commandline like '%KGlJwfWDbCPnvwEJupeivI1FXsSptuyh%' or source_process_commandline like '%NXLAi%');", 
      "description": "Detect malware killing miners.", 
      "interval": 3600
    }, 
    "detection_malicious_python_packages": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT name as package_name, version as package_version, summary, path as file_path, author FROM python_packages WHERE (package_name = 'smplejson' OR package_name = 'pkgutil' OR package_name = 'timeit' OR package_name = 'smplejson' OR package_name = 'diango' OR package_name = 'djago' OR package_name = 'dajngo' OR package_name = 'djanga' OR package_name = 'easyinstall' OR package_name = 'libpeshka' OR package_name = 'pyconau-funtimes' OR package_name = 'mybiubiubiu');", 
      "description": "Detect known malicious Python libraries.", 
      "interval": 3600
    }, 
    "detection_malware_rootkit_ark_rootkit": {
      "platform": "linux", 
      "removed": false, 
      "description": "ark_rootkit detection", 
      "interval": 3600, 
      "query": "select path as file_name, directory as file_path, uid as source_userid, gid as user_group_id, malware_family as malware_family FROM file LEFT OUTER JOIN (SELECT 'ark_rootkit' as malware_family) where path in ('/dev/ptyxx');"
    }, 
    "etc_hosts": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT address as policy_address, hostnames as identity_host_name FROM etc_hosts WHERE hostnames != 'localhost' and hostnames NOT LIKE 'ip6-%' and address NOT IN ('::1', 'fe80::1');", 
      "description": "Lists /etc/hosts entries", 
      "interval": 3600
    },
    "outbound_connections": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT action as event_action, pid as source_process_id, path as source_process, success as event_outcome, family, remote_address as destination_address, remote_port as destination_port, time as timestamp_occured FROM socket_events WHERE success=1 AND remote_port != 0 and socket_events.path NOT IN ('/usr/bin/hostname') AND destination_address NOT IN ('127.0.0.1', '127.0.1.1', '169.254.169.254', '', '0000:0000:0000:0000:0000:0000:0000:0001', '::1', '0000:0000:0000:0000:0000:ffff:7f00:0001', 'unknown', '0.0.0.0', '0000:0000:0000:0000:0000:0000:0000:0000') AND NOT (destination_address LIKE '10.%' OR destination_address LIKE '192.168.%' OR (destination_address >= '172.16.0.0' AND destination_address <= '172.31.255.255')) AND source_process NOT IN ('/usr/bin/osqueryd', '/usr/sbin/chronyd');", 
      "description": "Retrieves new socket creation information", 
      "interval": 10
    }, 
    "detection_linux_agent_passwordattacks": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT process_events.cmdline as source_process_commandline, process_events.cwd, process_events.parent as source_process_parent_process_id, process_events.path as file_path, process_events.pid as source_process_id, process_events.uid as source_userid, parent_processes.path as parent_path, parent_processes.cmdline as source_process_parent_commandline, parent_processes.uid as parent_uid from process_events LEFT OUTER JOIN processes parent_processes ON process_events.parent = parent_processes.pid WHERE file_path LIKE '%/brutespray' OR file_path LIKE '%/cachedump' OR file_path LIKE '%/lsadump' OR file_path LIKE '%/pwdump' OR file_path LIKE '%/dbpwaudit' OR file_path LIKE '%/findmyhash' OR file_path LIKE '%/gpp-decrypt' OR file_path LIKE '%/hash-identifier' OR file_path LIKE '%/hashcat' OR file_path LIKE '%/hydra' OR file_path LIKE '%/john' OR file_path LIKE '%/johnny' OR file_path LIKE '%/keimpx' OR file_path LIKE '%/ncrack' OR file_path LIKE '%/ophcrack' OR file_path LIKE '%/ophcrack-cli' OR file_path LIKE '%/rcrack' OR file_path LIKE '%/sqldict' OR file_path LIKE '%/truecrack';", 
      "description": "Detects common tools for passwordattacks", 
      "interval": 10
    }, 
    "detection_linux_agent_bash_history_deleted": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT action as event_action, category as content_category, target_path as file_path, uid as source_userid, gid as user_group_id, mode as file_permission, size as file_kb_size, mtime as timestamp_occured, sha1, sha256 FROM file_events WHERE (file_path LIKE '%.bash_history' AND sha1 = 'adc83b19e793491b1c6ea0fd8b46cd9f32e592fc' AND event_action = 'UPDATED') OR (file_path LIKE '%.bash_history' AND sha1 = '' AND event_action = 'ATTRIBUTES_MODIFIED');", 
      "description": "Detect newly empty bash history", 
      "interval": 10
    }, 
    "detection_linux_agent_dhclient_suspicious_command": {
      "platform": "linux", 
      "removed": false, 
      "query": "select processes.path as file_path, parent_processes.path as source_process_parent, processes.cmdline as source_process_commandline, parent_processes.cmdline as source_process_parent_commandline, processes.name as name, parent_processes.name as source_process_parent from processes LEFT OUTER JOIN processes parent_processes ON processes.parent = parent_processes.pid where (source_process_parent like '%dhclient%' and source_process_parent_commandline like '%bash%') and (source_process_commandline like '%-e /bin/bash%' or file_path like '%/ncat' or source_process_commandline like 'nc%' or source_process_commandline LIKE '%wget %' or source_process_commandline LIKE '%/etc/passwd' OR source_process_commandline LIKE '%curl %');", 
      "description": "Detects a DHCP Client executing a suspicious command", 
      "interval": 30
    }, 
    "shell_history": {
      "platform": "linux", 
      "removed": false, 
      "query": "SELECT users.uid as source_userid, users.username as source_username, command as source_process_commandline, history_file as file_name FROM shell_history JOIN users USING (uid) WHERE shell_history.uid IN (SELECT uid from users);", 
      "description": "Shell history", 
      "interval": "3600"
    }
  },
  "options": {
    "audit_allow_sockets": true, 
    "worker_threads": 2, 
    "audit_persist": true,
    "disable_logging": false,
    "events_expiry": 6000, 
    "audit_allow_config": true,
    "logger_min_status": 1, 
    "enable_monitor": true,
    "logger_plugin": "syslog", 
    "utc": true,
    "disable_extensions": true, 
    "disable_events": false, 
    "logger_event_type": true,
    "disable_audit": false, 
    "logger_snapshot_event_type": true,
    "logger_path": "/var/log/osquery/"
  }
}